name: Build OnePlus_SukiSU Ultra All
on:
  workflow_dispatch:
    inputs:
      FEIL:
        type: choice
        description: "配置文件"
        required: true
        default: oneplus_ace2pro_v
        options:
          - oneplus_nord_ce4_v
          - oneplus_ace_3v_v
          - oneplus_nord_4_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad2_v
          - oneplus_13
          - oneplus_ace5_pro
          - oneplus_13t
          - oneplus_13s
          - oneplus_pad_2_pro
          - oneplus_pad_3
      BUILD_METHOD:
        type: choice
        description: "编译方式"
        required: true
        default: gki
        options:
          - gki
          - perf
      SUSFS_CI:
        type: choice
        description: "下载SUSFS模块调用方式"
        required: true
        default: CI
        options:
          - CI
          - Release
          - NoN
      SUFFIX:
        type: string
        description: "自定义内核后缀 (留空则使用随机字符串)"
        required: false
        default: ""
      FAST_BUILD:
        type: boolean
        description: "是否启用极速构建？"
        required: true
        default: true
      VFS:
        type: boolean
        description: "是否启用手动钩子(VFS)？"
        required: true
        default: true
      KPM:
        type: boolean
        description: "是否启用内核模块(KPM)？"
        required: true
        default: true
      SCHED:
        type: boolean
        description: "是否添加风驰驱动？"
        required: true
        default: false
      ZRAM:
        type: boolean
        description: "是否添加更多的ZRAM算法？"
        required: true
        default: false

env:
  USE_VFS: ${{ inputs.VFS == 'true' }}
  USE_ZRAM: ${{ inputs.ZRAM == 'true' }}
  USE_KPM: ${{ inputs.KPM == 'true' }}
  USE_SCHED: ${{ inputs.SCHED == 'true' }}
  USE_FAST_BUILD: ${{ inputs.FAST_BUILD == 'true' }}

jobs:
  get-config:
    uses: ./.github/workflows/feil-map.yml
    with:
      FEIL: ${{ inputs.FEIL }}
    secrets: inherit

  kernel_vars:
    runs-on: ubuntu-latest
    outputs:
      gki_version: ${{ steps.set_vars.outputs.GKI_V }}
      sublevel: ${{ steps.set_vars.outputs.SUBLEVEL }}
      trusty_exists: ${{ steps.set_vars.outputs.trusty_exists }}
    steps:
      - name: Set Kernel Variables
        id: set_vars
        run: |
          GKI_V="${{ needs.get-config.outputs.ANDROID_VERSION }}-${{ needs.get-config.outputs.KERNEL_VERSION }}"
          echo "GKI_V=$GKI_V" >> $GITHUB_OUTPUT
          
          # 模拟获取 SUBLEVEL
          echo "SUBLEVEL=0" >> $GITHUB_OUTPUT
          
          # 模拟获取 trusty_exists
          echo "trusty_exists=false" >> $GITHUB_OUTPUT

  build:
    needs: [get-config, kernel_vars]
    name: ${{ env.USE_FAST_BUILD && ' [FAST]' || '' }}${{ env.USE_SCHED && ' [SCHED]' || '' }}${{ env.USE_ZRAM && ' [ZRAM]' || '' }}For ${{ inputs.FEIL }} ${{ inputs.BUILD_METHOD }} ${{ inputs.SUFFIX }}
    runs-on: ubuntu-latest
    env:
      CPU: ${{ needs.get-config.outputs.CPU }}
      CPUD: ${{ needs.get-config.outputs.CPUD }}
      ANDROID_VERSION: ${{ needs.get-config.outputs.ANDROID_VERSION }}
      KERNEL_VERSION: ${{ needs.get-config.outputs.KERNEL_VERSION }}
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache
      CCACHE_MAXSIZE: 8G
      GKI_V: ${{ needs.kernel_vars.outputs.gki_version }}
      SUBLEVEL: ${{ needs.kernel_vars.outputs.sublevel }}
      TRUSTY_EXISTS: ${{ needs.kernel_vars.outputs.trusty_exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Enable ZRAM swap
        run: |
          sudo modprobe zram
          echo lz4 | sudo tee /sys/block/zram0/comp_algorithm
          echo 6G | sudo tee /sys/block/zram0/disksize
          sudo mkswap /dev/zram0
          sudo swapon /dev/zram0 -p 100
          free -h

      - name: Configure Git
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Show selected inputs
        run: |
          echo "Selected CPU: $CPU"
          echo "Selected FEIL: ${{ inputs.FEIL }}"
          echo "Selected CPUD: $CPUD"
          echo "Selected ANDROID_VERSION: $ANDROID_VERSION"
          echo "Selected KERNEL_VERSION: $KERNEL_VERSION"
          echo "Selected BUILD_METHOD: ${{ inputs.BUILD_METHOD }}"
          echo "Custom SUFFIX: ${{ inputs.SUFFIX }}"
          echo "Selected SUSFS_CI: ${{ inputs.SUSFS_CI }}"
          echo "Selected VFS: ${{ env.USE_VFS }}"
          echo "Selected KPM: ${{ env.USE_KPM }}"
          echo "Selected FAST_BUILD: ${{ env.USE_FAST_BUILD }}"       
          echo "Selected ZRAM: ${{ env.USE_ZRAM }}"
          echo "Selected SCHED: ${{ env.USE_SCHED }}"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl ccache rsync jq unzip

      - name: Restore ccache
        uses: actions/cache@v3
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Install repo tool
        run: |
          curl -fsSL https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/$CPU -m ${{ inputs.FEIL }}.xml --depth=1
          repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync
          
          # Remove protected exports
          find . -name BUILD.bazel -exec sed -i '/protected_exports_list/d' {} +
          find . -name 'abi_gki_protected_exports_*' -delete

      - name: Process Kernel Suffix
        run: |
          set -e
          cd kernel_workspace
          
          # 生成后缀
          if [ -n "${{ inputs.SUFFIX }}" ]; then
            SUFFIX="${{ inputs.SUFFIX }}"
          else
            RANDOM_DIGIT=$(od -An -N1 -tu1 < /dev/urandom | tr -d '[:space:]' | awk '{print $1 % 11}')
            RANDOM_HASH=$(od -An -N7 -tx1 /dev/urandom | tr -d ' \n')
            SUFFIX="${RANDOM_DIGIT}-o-g${RANDOM_HASH}"
          fi
          
          # 处理 setlocalversion 文件
          for path in \
            kernel_platform/common/scripts/setlocalversion \
            kernel_platform/msm-kernel/scripts/setlocalversion \
            kernel_platform/external/dtc/scripts/setlocalversion; do
            
            [ -f "$path" ] || continue
            
            # 删除 -dirty 标记
            sed -i 's/ -dirty//g' "$path"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$path"

            if [ "${{ env.USE_FAST_BUILD }}" = "true" ]; then
              sed -i "s/^res=.*/res=\"-${ANDROID_VERSION}-${SUFFIX}\"/" "$path"
            else
              sed -i '/^res=/a res=$(echo "$res" | sed -E '\''s/(-[0-9]+-o)+-g[0-9a-f]{7,}.*$//'\'')' "$path"
              sed -i "\$s|echo \"\\\$res\"|echo \"\$res-${SUFFIX}\"|" "$path"
            fi
          done
          
          git add -A
          git commit -m "Updated kernel suffix: $SUFFIX"

      - name: Download manifest
        run: |
          feil="${{ inputs.FEIL }}"
          mkdir -p .repo/manifests
          curl -fL --retry 5 --retry-delay 2 --retry-connrefused \
            "https://raw.githubusercontent.com/OnePlusOSS/kernel_manifest/oneplus/$CPU/$feil.xml" \
            -o ".repo/manifests/${feil}.xml"

      - name: Add KernelSU-SukiSU Ultra
        run: |
          cd kernel_workspace/kernel_platform
          curl -fL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          
          cd ./KernelSU
          KSU_VERSION=$(expr $(git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Apply Patches
        run: |
          set -e
          cd kernel_workspace
          
          # 克隆补丁仓库
          git clone -q https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${GKI_V}
          git clone -q https://github.com/ShirkNeko/SukiSU_patch.git
          
          cd kernel_platform
          
          # 应用 SUSFS 补丁
          rsync -a ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${GKI_V}.patch ./common/
          rsync -a ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          rsync -a ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          # 应用 ZRAM 补丁
          if [ "${{ env.USE_ZRAM }}" = "true" ]; then
            rsync -a ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
            rsync -a ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
            rsync -a ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
            rsync -a ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          fi
          
          cd ./common
          
          # 特殊内核版本修复
          if [ "$GKI_V" == "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
            curl -fL --retry 5 https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy -o fix_5.15.legacy.patch
            patch -p1 < fix_5.15.legacy.patch
          fi
          
          # SUSFS 特定修复
          if [ "$KERNEL_VERSION" == "6.6" ] && [ "$TRUSTY_EXISTS" == "false" ]; then
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${GKI_V}.patch
            sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${GKI_V}.patch
          fi
          
          patch -p1 < 50_add_susfs_in_gki-${GKI_V}.patch
          
          # 应用其他补丁
          rsync -a ../../SukiSU_patch/69_hide_stuff.patch ./
          patch -p1 < 69_hide_stuff.patch
          
          # 应用 VFS 补丁
          if [ "${{ env.USE_VFS }}" = "true" ]; then
            rsync -a ../../SukiSU_patch/hooks/syscall_hooks.patch ./
            patch -p1 < syscall_hooks.patch
          fi
          
          # 应用 ZRAM 算法补丁
          if [ "${{ env.USE_ZRAM }}" = "true" ]; then
            rsync -a ../../SukiSU_patch/other/zram/zram_patch/$KERNEL_VERSION/lz4kd.patch ./
            patch -p1 < lz4kd.patch || true
            
            rsync -a ../../SukiSU_patch/other/zram/zram_patch/$KERNEL_VERSION/lz4k_oplus.patch ./
            patch -p1 < lz4k_oplus.patch || true
          fi
          
          # 应用 OGKI 到 GKI 转换补丁
          if [ "$KERNEL_VERSION" == "6.6" ]; then
            sed -i '1iobj-y += hmbird_patch.o' drivers/Makefile
            curl -fL https://github.com/Numbersf/Action-Build/raw/SukiSU-Ultra/patches/hmbird_patch.patch -o hmbird_patch.patch
            patch -p1 < hmbird_patch.patch
          fi

      - name: Configure Kernel
        run: |
          set -e
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          
          # 核心配置
          cat << EOF >> "$CONFIG_FILE"
          CONFIG_KSU=y
          CONFIG_KPM=y
          EOF
          
          # VFS 配置
          if [ "${{ env.USE_VFS }}" = "true" ]; then
            cat << EOF >> "$CONFIG_FILE"
            CONFIG_KSU_SUSFS_SUS_SU=n
            CONFIG_KSU_MANUAL_HOOK=y
            CONFIG_KSU_SUSFS=y
            CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
            CONFIG_KSU_SUSFS_SUS_PATH=y
            CONFIG_KSU_SUSFS_SUS_MOUNT=y
            CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
            CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
            CONFIG_KSU_SUSFS_SUS_KSTAT=y
            CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
            CONFIG_KSU_SUSFS_TRY_UMOUNT=y
            CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
            CONFIG_KSU_SUSFS_SPOOF_UNAME=y
            CONFIG_KSU_SUSFS_ENABLE_LOG=y
            CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
            CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
            CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
            EOF
          else
            echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
          fi
          
          # BBR 网络优化
          cat << EOF >> "$CONFIG_FILE"
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          EOF
          
          # ZRAM 配置
          if [ "${{ env.USE_ZRAM }}" = "true" ]; then
            cat << EOF >> "$CONFIG_FILE"
            CONFIG_CRYPTO_LZ4HC=y
            CONFIG_CRYPTO_LZ4K=y
            CONFIG_CRYPTO_LZ4KD=y
            CONFIG_CRYPTO_842=y
            CONFIG_CRYPTO_LZ4K_OPLUS=y
            CONFIG_ZRAM_WRITEBACK=y
            EOF
          fi
          
          # 移除检查
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Add sched_ext
        if: ${{ env.USE_SCHED }}
        run: |
         cd kernel_workspace/kernel_platform/
         git clone -q https://github.com/HanKuCha/sched_ext.git
         rsync -a ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git

      - name: Enable ThinLTO for FAST builds
        if: ${{ env.USE_FAST_BUILD && (env.KERNEL_VERSION == '5.10' || env.KERNEL_VERSION == '5.15') }}
        run: |
          cd kernel_workspace/kernel_platform
          DEFCONFIG=./common/arch/arm64/configs/gki_defconfig
          
          sed -i 's/^CONFIG_LTO=n/CONFIG_LTO=y/' "$DEFCONFIG"
          sed -i 's/^CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
          sed -i 's/^CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
          grep -q '^CONFIG_LTO_CLANG_THIN=y' "$DEFCONFIG" || echo 'CONFIG_LTO_CLANG_THIN=y' >> "$DEFCONFIG"

      - name: Build Kernel (FAST)
        if: ${{ env.USE_FAST_BUILD }}
        run: |
          set -euo pipefail
          cd kernel_workspace/kernel_platform/common
          
          # 设置工具链路径
          if [[ "$KERNEL_VERSION" == "6.6" ]]; then
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
          elif [[ "$KERNEL_VERSION" == "6.1" ]]; then
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r487747c/bin:$PATH"
          elif [[ "$KERNEL_VERSION" == "5.15" ]]; then
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r450784e/bin:$PATH"
          elif [[ "$KERNEL_VERSION" == "5.10" ]]; then
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts-master/clang/host/linux-x86/clang-r416183b/bin:$PATH"
          else
            echo "⚠️ Unsupported kernel version, using fallback build"
            cd ../..
            LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 \
            ./kernel_platform/oplus/build/oplus_build_kernel.sh $CPUD ${{ inputs.BUILD_METHOD }}
            exit 0
          fi
          
          # 构建参数
          MAKE_ARGS=(
            "LLVM=1"
            "ARCH=arm64"
            "CROSS_COMPILE=aarch64-linux-gnu-"
            "CC=clang"
            "RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc"
            "PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole"
            "LD=ld.lld"
            "HOSTLD=ld.lld"
            "KCFLAGS+=-Wno-error"
          )
          
          # 5.10 特殊参数
          if [[ "$KERNEL_VERSION" == "5.10" ]]; then
            MAKE_ARGS+=("LLVM_IAS=1")
          fi
          
          # 执行构建
          make -j$(nproc --all) O=out "${MAKE_ARGS[@]}" gki_defconfig
          make -j$(nproc --all) O=out "${MAKE_ARGS[@]}"
          
          # 验证构建结果
          if [ ! -f "out/arch/arm64/boot/Image" ]; then
            echo "❌ Build failed: Kernel image not found"
            exit 1
          fi

      - name: Build Kernel (Fallback)
        if: ${{ !env.USE_FAST_BUILD }}
        run: |
          set -e
          cd kernel_workspace
          
          if [[ "$CPU" == "sm8650" || "$CPU" == "sm7675" ]]; then
            ./kernel_platform/build_with_bazel.py -t $CPUD ${{ inputs.BUILD_METHOD }}
          else
            LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 \
            ./kernel_platform/oplus/build/oplus_build_kernel.sh $CPUD ${{ inputs.BUILD_METHOD }}
          fi

      - name: Prepare AnyKernel3
        run: |
          set -e
          git clone -q https://github.com/Numbersf/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          
          # 定义搜索路径
          SEARCH_PATHS=(
            "kernel_workspace/kernel_platform/out/msm-kernel-${CPUD}-${{ inputs.BUILD_METHOD }}/dist/"
            "kernel_workspace/kernel_platform/bazel-out/k8-fastbuild/bin/msm-kernel/${CPUD}_gki_kbuild_mixed_tree/"
            "kernel_workspace/kernel_platform/out/msm-${CPUD}-${CPUD}-${{ inputs.BUILD_METHOD }}/dist/"
            "kernel_workspace/kernel_platform/out/msm-kernel-${CPUD}-${{ inputs.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/"
            "kernel_workspace/kernel_platform/out/msm-${CPUD}-${CPUD}-${{ inputs.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/"
            "kernel_workspace/kernel_platform/common/out/"
          )
          
          # 查找内核镜像
          image_path=""
          for path in "${SEARCH_PATHS[@]}"; do
            if [ -f "${path}Image" ]; then
              image_path="${path}Image"
              break
            fi
          done
          
          # 验证找到的内核镜像
          if [ -z "$image_path" ]; then
            echo "❌ Error: Kernel image not found in any search paths"
            exit 1
          fi
          
          # 复制内核镜像
          mkdir -p ./AnyKernel3
          cp "$image_path" ./AnyKernel3/Image
          
          # 复制其他文件 (sm8750 特殊处理)
          if [ "$CPU" = "sm8750" ] && [ "${{ env.USE_FAST_BUILD }}" = "false" ]; then
            base_dir=$(dirname "$image_path")
            for file in dtbo.img system_dlkm.erofs.img vendor_dlkm.img vendor_boot.img; do
              if [ -f "${base_dir}${file}" ]; then
                target_name="${file}"
                [ "$file" = "system_dlkm.erofs.img" ] && target_name="system_dlkm.img"
                cp "${base_dir}${file}" "./AnyKernel3/$target_name"
              fi
            done
          fi

      - name: Apply KPM Patch
        if: ${{ env.USE_KPM }}
        run: |
          set -e
          cd kernel_workspace/kernel_platform/out/msm-kernel-${CPUD}-${{ inputs.BUILD_METHOD }}/dist
          curl -fL --retry 5 https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux -o patch_linux
          chmod +x patch_linux
          ./patch_linux
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3/Image

      - name: Download SUSFS Module (CI)
        if: ${{ inputs.SUSFS_CI == 'CI' }}
        continue-on-error: true
        run: |
          ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success&branch=v1.5.2+" | \
            jq -r '.workflow_runs[0].artifacts[0].archive_download_url // empty')
          
          if [ -n "$ARTIFACT_URL" ]; then
            curl -fL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o ksu_module_susfs_1.5.2+_CI.zip "$ARTIFACT_URL"
            cp ksu_module_susfs_1.5.2+_CI.zip ./AnyKernel3/
          else
            echo "⚠️ Failed to fetch SUSFS module from CI"
          fi

      - name: Download SUSFS Module (Release)
        if: ${{ inputs.SUSFS_CI == 'Release' }}
        continue-on-error: true
        run: |
          curl -fL --retry 5 https://github.com/sidex15/ksu_module_susfs/releases/latest/download/ksu_module_susfs_1.5.2+.zip \
            -o ksu_module_susfs_1.5.2+_Release.zip
          cp ksu_module_susfs_1.5.2+_Release.zip ./AnyKernel3/

      - name: Download SukiSU-Ultra APK
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ARTIFACT_URL=$(gh api \
            "repos/SukiSU-Ultra/SukiSU-Ultra/actions/runs?branch=main&status=success&per_page=1" \
            --jq '.workflow_runs[0].artifacts[] | select(.name == "manager") | .archive_download_url' || echo "")
          
          if [ -n "$ARTIFACT_URL" ]; then
            curl -fL -H "Authorization: token $GITHUB_TOKEN" -o manager.zip "$ARTIFACT_URL"
            unzip -j manager.zip "*.apk" -d ./AnyKernel3/
          else
            echo "⚠️ Failed to download SukiSU-Ultra APK"
          fi

      - name: Set artifact suffix
        id: suffix
        run: |
          suffix=""
          ${{ env.USE_VFS }} && suffix="${suffix}_VFS"
          ${{ env.USE_ZRAM }} && suffix="${suffix}_LZ4KD"
          ${{ env.USE_KPM }} && suffix="${suffix}_KPM"
          ${{ env.USE_SCHED }} && suffix="${suffix}_SCHED"
          echo "value=${suffix}" >> $GITHUB_OUTPUT

      - name: Set clean FEIL name
        id: feil_clean
        run: |
          feil_base=$(echo "${{ inputs.FEIL }}" | sed -E 's/_[a-z]$//')
          echo "value=${feil_base}" >> $GITHUB_OUTPUT

      - name: Upload AnyKernel3 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSUUltra_${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}${{ steps.suffix.outputs.value }}
          path: ./AnyKernel3/*
          compression-level: 9

      - name: Prepare ZRAM Module
        if: ${{ env.USE_ZRAM }}
        run: |
          set -e
          # 下载 ZRAM 模块
          LATEST_URL=$(curl -s https://api.github.com/repos/FurLC/ZRAM-Module/releases/latest | \
            jq -r '.assets[] | select(.name | test("ZRAM-Module-.*\\.zip")) | .browser_download_url')
          
          curl -fL --retry 5 "$LATEST_URL" -o zram_module.zip
          unzip zram_module.zip -d ZRAM-Module
          
          # 查找 zram.ko
          SEARCH_PATHS=(
            "kernel_workspace/kernel_platform/out/msm-kernel-${CPUD}-${{ inputs.BUILD_METHOD }}/dist/"
            "kernel_workspace/kernel_platform/out/msm-${CPUD}-${CPUD}-${{ inputs.BUILD_METHOD }}/dist/"
            "kernel_workspace/kernel_platform/out/dist/"
            "kernel_workspace/kernel_platform/out/vendor/oplus/kernel/mm/"
            "kernel_workspace/device/qcom/${CPUD}-kernel/vendor_dlkm/"
            "kernel_workspace/device/qcom/${CPUD}-kernel/system_dlkm/flatten/lib/modules/"
            "kernel_workspace/kernel_platform/out/msm-kernel-${CPUD}-${{ inputs.BUILD_METHOD }}/msm-kernel/mm/oplus_mm/hybridswap_zram/"
            "kernel_workspace/kernel_platform/out/msm-kernel-${CPUD}-${{ inputs.BUILD_METHOD }}/msm-kernel/mm/oplus_bsp_hybridswap_zram/"
          )
          
          zram_path=""
          for path in "${SEARCH_PATHS[@]}"; do
            if [ -f "${path}zram.ko" ]; then
              zram_path="${path}zram.ko"
              break
            fi
          done
          
          if [ -z "$zram_path" ]; then
            echo "⚠️ ZRAM module not found, skipping"
            exit 0
          fi
          
          # 复制到 ZRAM-Module 目录
          mkdir -p ZRAM-Module/zram
          cp "$zram_path" ZRAM-Module/zram/zram.ko

      - name: Upload ZRAM Module
        if: ${{ env.USE_ZRAM }}
        uses: actions/upload-artifact@v4
        with:
          name: ZRAM-Module_${KERNEL_VERSION}_${{ steps.feil_clean.outputs.value }}
          path: ZRAM-Module/*
          compression-level: 9
